%% name = Tuml::Parser
%% {
  def initialize *args
    setup_parser *args
    @stack = []
  end

  def close_block collection, name
    collection << [:block, :close, name]
  end

  # After parsing the stack may not be empty so we need to explicitely close
  # all open blocks.
  def empty_stack!
    @stack.reverse.each do |blk|
      @ast << [:block, :close, blk]
    end
  end

  # In order to efficiently generate HTML from the sexp, we need to collect
  # the parse tree into nested expressions. This process is made far simpler
  # as we have ensured that for every :open there is a matching :close.
  def collect_blocks!
    # We inject over an array with the first element being the new ast to be
    # returned. This serves as our root context and will never be closed.
    @ast = @ast.inject([[:multi]]) do |stack, node|
      case node[0]
      when :block, :cond
        case node[1]
        # Create a new block and set its body as the current context.
        when :open
          body = [:multi]
          stack.last << [node[0], *node[2..-1], body]
          stack << body

        # Close the current context
        when :close
          stack.pop
        end

      # Push any other blocks into the current context
      else
        stack.last << node
      end

      stack
    end.first
  end

  def compile
    parse
    empty_stack!
    collect_blocks!

    return @ast
  end
}


eof = !.

st = "{"
et = "}"

sep = ":"

attr_sep = "="

space = " " | "\t"
sp = space+
-  = space*

# TODO: Support other types of quoting. The Tumblr docs only advertise double
#   quotes so for the moment that is the easiest to support.
quo = '"'

escape_type = < "URLEncoded" | "JSPlaintext" | "Plaintext" | "JS" >
  { text.downcase }

opt_type    = < "color" | "image" | "font" | "text" | "lang" >
  { text.downcase }

block_type = ("/"?):close "block"
  { close ? :close : :open }

bool_type  = < "IfNot" | "If" >
  { text.downcase }

name = < /[a-zA-Z][0-9a-zA-Z-]*/ >
  { text }

label = < (!et .)+ >
  { text }


attr_key = < (!attr_sep .)+ >
  { text }

attr_val = quo < (!quo .)+ > quo
  { text }

attr = sp attr_key:key attr_sep attr_val:val
  { [key, val] }


var_tag = name:name attr*:attrs
  { [attrs.empty? ? [:tag, name] : [:tag, name, Hash[attrs]]] }

escaped_var_tag  = escape_type:type var_tag:v
  { [[:esc, type.to_sym, *v]] }

opt_tag = opt_type:opt sep label:label
  { [[opt.to_sym, label]] }

block = block_type:type sep name:name
  {
    result = []
    if idx = @stack.rindex(name)
      # Close all the blocks leading up to current one
      (@stack.length - 1 - idx).times do
        close_block result, @stack.pop
      end

      # Force close the block
      type = :close
      @stack.pop
    else
      @stack << name
    end

    result << [:block, type, name]
    result
  }

cond = block_type:type sep bool_type:bool_type name:name
  # { [[:cond, type, bool_type.to_sym, name]] }
  { [[:noop]]}


tag = st (cond | block | opt_tag | escaped_var_tag | var_tag):body et
  { body }

noop = st (!et .)+ et
  { [[:noop]] }

static = < (!tag .)+ >
  { [[:static, text]] }

sequence = (tag | noop | static)*:groups
  {
    groups.each_with_object([]) do |elms, result|
      elms.each {|elm| result << elm}
    end
  }

root = sequence:s eof
  { @ast = s }
